#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2022 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:    sensirion-driver-generator 0.9.1
# Product:      sht4x
# Version:      None
#

from enum import Enum
from sensirion_i2c_adapter.transfer import Transfer, TxData, RxData
from sensirion_driver_support_types.bitfield import BitField, BitfieldContainer


class MeasureHighPrecisionTicks(Transfer):
    CMD_ID = 0xfd

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>HH')


class MeasureMediumPrecisionTicks(Transfer):
    CMD_ID = 0xf6

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=0.005, slave_address=None, ignore_ack=False)
    rx = RxData('>HH')


class MeasureLowestPrecisionTicks(Transfer):
    CMD_ID = 0xe0

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=0.002, slave_address=None, ignore_ack=False)
    rx = RxData('>HH')


class ActivateHighestHeaterPowerLongTicks(Transfer):
    CMD_ID = 0x39

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=1.1, slave_address=None, ignore_ack=False)
    rx = RxData('>HH')


class ActivateHighestHeaterPowerShortTicks(Transfer):
    CMD_ID = 0x32

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=0.11, slave_address=None, ignore_ack=False)
    rx = RxData('>HH')


class ActivateMediumHeaterPowerLongTicks(Transfer):
    CMD_ID = 0x2f

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=1.1, slave_address=None, ignore_ack=False)
    rx = RxData('>HH')


class ActivateMediumHeaterPowerShortTicks(Transfer):
    CMD_ID = 0x24

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=0.11, slave_address=None, ignore_ack=False)
    rx = RxData('>HH')


class ActivateLowestHeaterPowerLongTicks(Transfer):
    CMD_ID = 0x1e

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=1.1, slave_address=None, ignore_ack=False)
    rx = RxData('>HH')


class ActivateLowestHeaterPowerShortTicks(Transfer):
    CMD_ID = 0x15

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=0.11, slave_address=None, ignore_ack=False)
    rx = RxData('>HH')


class SerialNumber(Transfer):
    CMD_ID = 0x89

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>I')


class SoftReset(Transfer):
    CMD_ID = 0x94

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
