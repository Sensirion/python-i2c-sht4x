#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2022 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:    sensirion-driver-generator 0.9.1
# Product:      sht4x
# Version:      None
#

import pytest
import time
from sensirion_i2c_driver import I2cConnection, CrcCalculator
from sensirion_shdlc_sensorbridge import (SensorBridgePort,
                                          SensorBridgeI2cProxy)
from sensirion_i2c_adapter.i2c_channel import I2cChannel
from sensirion_i2c_sht4x.device import Sht4xDevice


@pytest.fixture
def sensor(bridge):
    # Configure SensorBridge port 1
    bridge.set_i2c_frequency(SensorBridgePort.ONE, frequency=100e3)
    bridge.set_supply_voltage(SensorBridgePort.ONE, voltage=3.3)
    bridge.switch_supply_on(SensorBridgePort.ONE)

    # Create SFM-Device device
    i2c_transceiver = SensorBridgeI2cProxy(bridge, port=SensorBridgePort.ONE)
    channel = I2cChannel(I2cConnection(i2c_transceiver),
                         slave_address=0x44,
                         crc=CrcCalculator(8, 0x31, 0xff, 0x0))
    dev = Sht4xDevice(channel)
    time.sleep(0.1)  # some time is required to power up the device
    yield dev
    # make sure the channel is powered off after executing tests
    bridge.switch_supply_off(SensorBridgePort.ONE)


@pytest.mark.needs_device
def test_measure_high_precision_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.measure_high_precision_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


@pytest.mark.needs_device
def test_measure_medium_precision_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.measure_medium_precision_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


@pytest.mark.needs_device
def test_measure_lowest_precision_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.measure_lowest_precision_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


@pytest.mark.needs_device
def test_activate_highest_heater_power_long_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.activate_highest_heater_power_long_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


@pytest.mark.needs_device
def test_activate_highest_heater_power_short_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.activate_highest_heater_power_short_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


@pytest.mark.needs_device
def test_activate_medium_heater_power_long_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.activate_medium_heater_power_long_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


@pytest.mark.needs_device
def test_activate_medium_heater_power_short_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.activate_medium_heater_power_short_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


@pytest.mark.needs_device
def test_activate_lowest_heater_power_long_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.activate_lowest_heater_power_long_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


@pytest.mark.needs_device
def test_activate_lowest_heater_power_short_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.activate_lowest_heater_power_short_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


@pytest.mark.needs_device
def test_serial_number1(sensor):
    serial_number = sensor.serial_number()
    print(f"serial_number: {serial_number}; "
          )


@pytest.mark.needs_device
def test_soft_reset1(sensor):
    sensor.soft_reset()


@pytest.mark.needs_device
def test_measure_high_precision1(sensor):
    (a_temperature, a_humidity
     ) = sensor.measure_high_precision()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


@pytest.mark.needs_device
def test_measure_medium_precision1(sensor):
    (a_temperature, a_humidity
     ) = sensor.measure_medium_precision()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


@pytest.mark.needs_device
def test_measure_lowest_precision1(sensor):
    (a_temperature, a_humidity
     ) = sensor.measure_lowest_precision()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


@pytest.mark.needs_device
def test_activate_highest_heater_power_long1(sensor):
    (a_temperature, a_humidity
     ) = sensor.activate_highest_heater_power_long()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


@pytest.mark.needs_device
def test_activate_highest_heater_power_short1(sensor):
    (a_temperature, a_humidity
     ) = sensor.activate_highest_heater_power_short()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


@pytest.mark.needs_device
def test_activate_medium_heater_power_long1(sensor):
    (a_temperature, a_humidity
     ) = sensor.activate_medium_heater_power_long()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


@pytest.mark.needs_device
def test_activate_medium_heater_power_short1(sensor):
    (a_temperature, a_humidity
     ) = sensor.activate_medium_heater_power_short()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


@pytest.mark.needs_device
def test_activate_lowest_heater_power_long1(sensor):
    (a_temperature, a_humidity
     ) = sensor.activate_lowest_heater_power_long()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


@pytest.mark.needs_device
def test_activate_lowest_heater_power_short1(sensor):
    (a_temperature, a_humidity
     ) = sensor.activate_lowest_heater_power_short()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )

