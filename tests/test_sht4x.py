#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2023 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 0.32.0
# Product:       sht4x
# Model-Version: 2.0.0
#

import pytest
from sensirion_i2c_sht4x.device import Sht4xDevice


@pytest.fixture
def sensor(channel_provider):
    channel_provider.i2c_frequency = 100e3
    channel_provider.supply_voltage = 3.3
    with channel_provider:
        channel = channel_provider.get_channel(slave_address=0x44,
                                               crc_parameters=(8, 0x31, 0xff, 0x0))
        yield Sht4xDevice(channel)


def test_measure_high_precision_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.measure_high_precision_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_measure_medium_precision_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.measure_medium_precision_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_measure_lowest_precision_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.measure_lowest_precision_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_activate_highest_heater_power_long_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.activate_highest_heater_power_long_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_activate_highest_heater_power_short_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.activate_highest_heater_power_short_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_activate_medium_heater_power_long_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.activate_medium_heater_power_long_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_activate_medium_heater_power_short_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.activate_medium_heater_power_short_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_activate_lowest_heater_power_long_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.activate_lowest_heater_power_long_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_activate_lowest_heater_power_short_ticks1(sensor):
    (temperature_ticks, humidity_ticks
     ) = sensor.activate_lowest_heater_power_short_ticks()
    print(f"temperature_ticks: {temperature_ticks}; "
          f"humidity_ticks: {humidity_ticks}; "
          )


def test_serial_number1(sensor):
    serial_number = sensor.serial_number()
    print(f"serial_number: {serial_number}; "
          )


def test_soft_reset1(sensor):
    sensor.soft_reset()


def test_measure_high_precision1(sensor):
    (a_temperature, a_humidity
     ) = sensor.measure_high_precision()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


def test_measure_medium_precision1(sensor):
    (a_temperature, a_humidity
     ) = sensor.measure_medium_precision()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


def test_measure_lowest_precision1(sensor):
    (a_temperature, a_humidity
     ) = sensor.measure_lowest_precision()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


def test_activate_highest_heater_power_long1(sensor):
    (a_temperature, a_humidity
     ) = sensor.activate_highest_heater_power_long()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


def test_activate_highest_heater_power_short1(sensor):
    (a_temperature, a_humidity
     ) = sensor.activate_highest_heater_power_short()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


def test_activate_medium_heater_power_long1(sensor):
    (a_temperature, a_humidity
     ) = sensor.activate_medium_heater_power_long()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


def test_activate_medium_heater_power_short1(sensor):
    (a_temperature, a_humidity
     ) = sensor.activate_medium_heater_power_short()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


def test_activate_lowest_heater_power_long1(sensor):
    (a_temperature, a_humidity
     ) = sensor.activate_lowest_heater_power_long()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )


def test_activate_lowest_heater_power_short1(sensor):
    (a_temperature, a_humidity
     ) = sensor.activate_lowest_heater_power_short()
    print(f"a_temperature: {a_temperature}; "
          f"a_humidity: {a_humidity}; "
          )

